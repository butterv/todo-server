// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/todo/todo.proto

package todo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _todo_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ScheduledDate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScheduledDate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Year

	// no validation rules for Month

	// no validation rules for Day

	return nil
}

// ScheduledDateValidationError is the validation error returned by
// ScheduledDate.Validate if the designated constraints aren't met.
type ScheduledDateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledDateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledDateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledDateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledDateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledDateValidationError) ErrorName() string { return "ScheduledDateValidationError" }

// Error satisfies the builtin error interface
func (e ScheduledDateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledDate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledDateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledDateValidationError{}

// Validate checks the field values on Todo with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Todo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Project

	// no validation rules for Label

	// no validation rules for Description

	if v, ok := interface{}(m.GetScheduledDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TodoValidationError{
				field:  "ScheduledDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TodoValidationError is the validation error returned by Todo.Validate if the
// designated constraints aren't met.
type TodoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoValidationError) ErrorName() string { return "TodoValidationError" }

// Error satisfies the builtin error interface
func (e TodoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoValidationError{}

// Validate checks the field values on CreateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoRequestValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTodoRequestValidationError is the validation error returned by
// CreateTodoRequest.Validate if the designated constraints aren't met.
type CreateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoRequestValidationError) ErrorName() string {
	return "CreateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoRequestValidationError{}

// Validate checks the field values on CreateTodoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTodoResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTodoResponseValidationError is the validation error returned by
// CreateTodoResponse.Validate if the designated constraints aren't met.
type CreateTodoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoResponseValidationError) ErrorName() string {
	return "CreateTodoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoResponseValidationError{}

// Validate checks the field values on UpdateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTodoRequestValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTodoRequestValidationError is the validation error returned by
// UpdateTodoRequest.Validate if the designated constraints aren't met.
type UpdateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoRequestValidationError) ErrorName() string {
	return "UpdateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoRequestValidationError{}

// Validate checks the field values on UpdateTodoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTodoResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTodoResponseValidationError is the validation error returned by
// UpdateTodoResponse.Validate if the designated constraints aren't met.
type UpdateTodoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoResponseValidationError) ErrorName() string {
	return "UpdateTodoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoResponseValidationError{}

// Validate checks the field values on DeleteTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTodoRequestValidationError is the validation error returned by
// DeleteTodoRequest.Validate if the designated constraints aren't met.
type DeleteTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoRequestValidationError) ErrorName() string {
	return "DeleteTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoRequestValidationError{}

// Validate checks the field values on DeleteTodoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTodoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTodoResponseValidationError is the validation error returned by
// DeleteTodoResponse.Validate if the designated constraints aren't met.
type DeleteTodoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoResponseValidationError) ErrorName() string {
	return "DeleteTodoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoResponseValidationError{}

// Validate checks the field values on GetTodosRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTodosRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTodosRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTodosRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTodosRequestValidationError is the validation error returned by
// GetTodosRequest.Validate if the designated constraints aren't met.
type GetTodosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodosRequestValidationError) ErrorName() string { return "GetTodosRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTodosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodosRequestValidationError{}

// Validate checks the field values on GetTodosResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTodosResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTodos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTodosResponseValidationError{
					field:  fmt.Sprintf("Todos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTodosResponseValidationError is the validation error returned by
// GetTodosResponse.Validate if the designated constraints aren't met.
type GetTodosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodosResponseValidationError) ErrorName() string { return "GetTodosResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTodosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodosResponseValidationError{}
